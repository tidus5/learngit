添加：  		git add file1.txt file2.txt
提交：  		git commit -m "add 3 file"
查看差异：				git diff readme.txt


查看提交日志：  			git log
查看提交日志（单行）：		git log --pretty=oneline

回退到上一个版本：			git reset --hard HEAD^		（上上个:HEAD^^  上100个: HEAD~100)
回到未来的某个版本：		git reset --hard 1094adb		（输入commit id）
查看操作命令历史：			git reflog

撤销
将工作区文件撤回到最近一次git commit或git add时的状态：	
git checkout -- readme.txt	（未add到暂存区，撤销到和库内一样。否则和暂存区一样。  -- 很重要，不能漏）
总结：
1.工作区修改，未add到缓存区，需要撤销：			git checkout -- file
2.工作区修改，add到了缓存区，需要先撤销暂存区：	git reset HEAD <file>		再回到场景1：	git checkout -- file
3.commit到了版本库，未推送到远程库。			git reset --hard commit_id


删除已经提交的文件：		git rm test.txt		git commit -m "remove test.txt"
本地rm 删除了，需要恢复:	git checkout -- <file>
如果git rm了， 需要恢复:	git reset HEAD <file>	git checkout -- <file>

添加远程库：				git remote add origin git@github.com:tidus5/learngit.git
首次推送并关联远程库：		git push -u origin master		
以后推送：					git push origin master
从远程库克隆				git clone git@github.com:michaelliao/gitskills.git



创建并切换到新分支：		git checkout -b dev		（-b参数表示创建并切换，相当于  git branch dev git checkout dev）
查看当前所有分支：			git branch
切换分支：					git checkout master
合并其他分支到当前分支：	git merge dev
删除分支：					git branch -d dev
merge后有冲突，解决后提交： git add readme.txt          git commit -m "conflict fixed"
查看分支合并图：			git log --graph --pretty=oneline --abbrev-commit
添加合并节点的合并：        git merge --no-ff -m "merge with no-ff" dev
强制删除未合并的分支：      git branch -D <name>
拉取并切换到远程分支：      git checkout -t origin/2.0.0
清除远端已删除的分支        git remote prune origin


保存工作现场：              git stash           （创建 bug分支时，可以使用来保存当前工作）
还原工作现场：              git stash pop       （等于 git stash apply  恢复， git stash drop 删除）
查看保存现场列表：          git stash list  
恢复指定的stash：           git stash apply stash@{0}     （最后stash的，会放到0， pop 弹出的也是0）



查看远程库的信息：          git remote           （显示详细信息：git remote -v）
推送分支：                  git push origin <branch-name>        （本地分支不推送，则对其他人不可见）
如果推送失败，则要拉取：    git pull
本地创建和远程对应分支：    git checkout -b branch-name origin/branch-name      （名称最好一致）
链接本地分支和远程分支：    git branch --set-upstream-to <branch-name> origin/<branch-name> （git push --set-upstream origin dev）



将本地提交和远程更新合并为单线：    git rebase origin   比如分支有2个提交，主线合并过来个新提交。 rebase 可以先将主线新提交放前面，再应用两个分支提交上去）http://gitbook.liuhui998.com/4_2.html
rebase遇到冲突解决后git add：    git rebase --continue
终止rebase：                git rebase --abort



打标签：                    git tag v1.0
查看所有标签                git tag
对某个commit提交打标签：    git tag v0.9 f52c633         （git log --pretty=oneline --abbrev-commit   查看历史提交）
查看标签信息：              git show <tagname>
指定标签信息：              git tag -a v0.1 -m "version 0.1 released" 1094adb
删除标签：                  git tag -d v0.1
推送某个标签到远程：        git push origin <tagname>
推送所有标签：              git push origin --tags
删除远程标签：              git tag -d v0.9     然后       git push origin :refs/tags/v0.9

在GitHub上，可以任意Fork开源仓库，自己拥有Fork后的仓库的读写权限
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件   .gitignore文件本身要放到版本库里
所有配置文件可以直接在线浏览：https://github.com/github/gitignore
配置别名：           git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

图片文档：
https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit